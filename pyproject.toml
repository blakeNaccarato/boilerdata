[build-system]
requires = ["flit_core==3.9.0"]
build-backend = "flit_core.buildapi"

[project]
name = "boilerdata"
version = "0.0.1"
description = "Data processing pipeline for a nucleate pool boiling apparatus."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.11"
classifiers = ["License :: OSI Approved :: MIT License"]
dependencies = [
    "boilercore>=0.0.4",
    "ipykernel>=6.29.0",
    "matplotlib>=3.7.2",
    "numpy>=1.24.4",
    "originpro>=1.1.7",
    "pandas[hdf5,performance]>=2.0.2",
    "pandera>=0.17.2",
    "propshop>=0.1.2",
    "pyarrow>=14.0.1",
    "pydantic>=2",
    "pyXSteam>=0.4.9",
    "scipy>=1.11.1",
    "seaborn>=0.12.2",
    # ? https://github.com/ipython/ipython/issues/14255
    "ipython<8.18",
]
[[project.authors]]
name = "Blake Naccarato"
email = "blake.naccarato@gmail.com"

[project.urls]
Changes = "https://blakeNaccarato.github.io/boilerdata/changelog.html"
Docs = "https://blakeNaccarato.github.io/boilerdata"
Home = "https://github.com/blakeNaccarato/boilerdata"
Tracker = "https://github.com/blakeNaccarato/boilerdata/issues"

[tool.fawltydeps]
output_format = "human_detailed"
code = ["src"]
deps = ["pyproject.toml"]
ignore_unused = [
    "pyarrow", # boilercv.init: pd.set_option("mode.string_storage", "pyarrow")
]
[tool.fawltydeps.custom_mapping]
boilercore = ["boilercore"]
ipykernel = ["IPython"]

[tool.pytest.ini_options]
addopts = '''
    --strict-config
    --strict-markers
    --color yes
    -p no:legacypaths
    -r a
'''
cache_dir = ".cache/.pytest_cache"
markers = "slow"
testpaths = "tests"
xfail_strict = true

[tool.pyright]
include = ["src", "tests", "docs"]
stubPath = "submodules/typings"
useLibraryCodeForTypes = true
typeCheckingMode = "strict"
# Default "true" in strict
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
disableBytesTypePromotions = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
# Default "false" in strict
deprecateTypingAliases = false
enableExperimentalFeatures = false
# Default "error" in strict
reportMissingModuleSource = "warning"
reportMissingImports = "warning"
reportUndefinedVariable = "warning"
reportAssertAlwaysTrue = "warning"
reportInvalidStringEscapeSequence = "warning"
reportInvalidTypeVarUse = "warning"
# Default "warning" in strict
reportMissingTypeStubs = "none"
# Default "error" in strict
reportSelfClsParameterName = "warning"
reportUnsupportedDunderAll = "warning"
reportUnusedExpression = "none"
reportWildcardImportFromLibrary = "warning"
reportGeneralTypeIssues = "warning"
reportOptionalSubscript = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalCall = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"
reportOptionalOperand = "warning"
reportTypedDictNotRequiredAccess = "warning"
reportPrivateImportUsage = "none"              # Flaky regarding "not exported"
reportUnboundVariable = "warning"
reportUnusedCoroutine = "none"
reportFunctionMemberAccess = "warning"
reportIncompatibleMethodOverride = "warning"
reportIncompatibleVariableOverride = "warning"
reportOverlappingOverload = "warning"
reportConstantRedefinition = "none"
reportDeprecated = "warning"
reportDuplicateImport = "warning"
reportIncompleteStub = "warning"
reportInconsistentConstructor = "warning"
reportInvalidStubStatement = "warning"
reportMatchNotExhaustive = "warning"
reportMissingParameterType = "none"
reportMissingTypeArgument = "warning"
reportPrivateUsage = "none"                    # Ruff checks this well enough
reportTypeCommentUsage = "warning"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnusedClass = "none"
reportUnusedImport = "none"
reportUnusedFunction = "none"
reportUnusedVariable = "none"
reportUntypedBaseClass = "none"
reportUntypedClassDecorator = "warning"
reportUntypedFunctionDecorator = "none"        # Often out of our control
reportUntypedNamedTuple = "warning"
# Defualt "none" in strict
reportCallInDefaultInitializer = "none"
reportImplicitOverride = "none"
reportImplicitStringConcatenation = "none"
reportImportCycles = "none"
reportMissingSuperCall = "none"
reportPropertyTypeMismatch = "none"
reportShadowedImports = "warning"
reportUninitializedInstanceVariable = "warning"
reportUnnecessaryTypeIgnoreComment = "none"
reportUnusedCallResult = "none"

[tool.ruff]
fix = true
force-exclude = true
show-fixes = true
show-source = true
preview = false
unsafe-fixes = false
cache-dir = ".cache/.ruff_cache"
fixable = ["ALL"]
extend-exclude = ["submodules/**"]
extend-include = ["*.ipynb"]
select = ["ALL"]
target-version = "py311"
extend-ignore = [
    "ANN",     # Don't require type annotations
    "ARG005",  # Allow unused lambda argument. For consistency across df pipelines.
    "C408",    # Allow dict calls
    "COM",     # Allow magic commas and magic missing commas
    "CPY001",  # Don't check for copyright
    "D10",     # Missing docstrings
    "D20",     # Don't reformat docstrings in these ways
    "D213",    # Multi-line docstring summary should start at the second line
    "D402",    # False positives for parens in first line
    "D412",    # Allow blanks below headers in Google-style docstrings
    "DTZ",     # Timezones are important, but only contextually necessary.
    "E501",    # Don't check line length. Black handles this.
    "EM",      # Don't check for exception message issues
    "ERA",     # False positives. Don't get rid of commented out code.
    "FBT",     # Allow boolean "traps"
    "FIX002",  # Allow TODOs
    "FLY002",  # Allow different string representations
    "G0",      # Allow f-strings, etc. in Loguru logging
    "INP001",  # False positives. Checks for packages missing `__init__.py`
    "ISC",     # False positives. Implicit string concatenation is fine.
    "PD009",   # Allow `iat`. It has its uses.
    "PD013",   # Allow `stack` instead of `melt`. They're not a direct swap.
    "PD101",   # Allow use of nunique(). False positives
    "PD901",   # Allow `df` variable name. We are all consenting adults here.
    "PD011",   # Allow use of `.values`. False positives.
    "PGH003",  # Until black stops wrapping special ignores, let's allow bare
    "PIE804",  # Allow dict unpack even if unnecessary, consisent for df.assign{**...}
    "PLR0913", # Allow more than five function arguments
    "PLR2004", # Allow magic values. This check is too sensitive
    "PLW2901", # For loop variable
    "RET",     # Return checks are flaky, Sourcery does fine analysing these paths
    "S301",    # Don't warn about pickling. Allow me to shoot myself in the foot.
    "TCH",     # Type checking linter doesn't play nicely with pydantic
    "TD",      # Disable to-do validation. Too pedantic for now.
    "TRY003",  # Allow long exception messages
    "W2",      # Allow whitespace issues. Fixed automatically by black.
]

[tool.ruff.format]
preview = true
skip-magic-trailing-comma = true

[tool.ruff.isort]
split-on-trailing-comma = false

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.extend-per-file-ignores]
"**/*.ipynb" = [
    "B018", # Allow "useless" expressions, which do suppress outputs in notebooks
    "F821", # Allow undefined names, such as `display`
    "S101", # Allow assert
    "T201", # Allow print in notebooks
]
"docs/**" = [
    "E402", # Need to allow imports below patches in docs notebooks
]
"tests/**" = [
    "ARG001", # Allow unused arguments in tests
    "S101",   # Allow assert in tests
    "SIM300", # Allow constants (expectations) on the RHS in tests
]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["typer.Argument", "typer.Option"]
